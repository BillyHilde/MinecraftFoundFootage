#version 410 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

#line 0 1
layout(std140) uniform CameraMatrices {
    mat4 ProjMat;
    mat4 IProjMat;
    mat4 ViewMat;
    mat4 IViewMat;
    mat3 IViewRotMat;
    vec3 CameraPosition;
    float NearPlane;
    float FarPlane;
} VeilCamera;

#line 4 0

layout (std430, binding = 0) buffer MyBuffer {
    vec3 position[];
} myBuffer;

layout (std430, binding = 1) buffer IndirectBuffer {
    uint count;
    uint primCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
} indirectBuffer;

uniform int NumOfInstances;
uniform float FrustumPlanes[24];

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;
    int increment = 0;


    vec3 cameraPos = VeilCamera.CameraPosition;
    vec3 player = vec3(floor(cameraPos.x),0 ,floor(cameraPos.z));




    memoryBarrierShared();
    barrier();



    uint compactIndex = atomicAdd(indirectBuffer.primCount, 1);
    vec3 offset = vec3(0, 36, 0 + compactIndex * 0.1) - player;
    myBuffer.position[compactIndex] = offset;




    barrier();
    memoryBarrierShared();
}