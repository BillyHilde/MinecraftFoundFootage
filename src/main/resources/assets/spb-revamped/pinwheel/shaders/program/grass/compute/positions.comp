#version 410 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

#line 0 1
layout(std140) uniform CameraMatrices {
    mat4 ProjMat;
    mat4 IProjMat;
    mat4 ViewMat;
    mat4 IViewMat;
    mat3 IViewRotMat;
    vec3 CameraPosition;
    float NearPlane;
    float FarPlane;
} VeilCamera;

#line 4 0

layout (std430, binding = 0) buffer MyBuffer {
    vec3 position[];
} myBuffer;

layout (std430, binding = 1) buffer IndirectBuffer {
    uint count;
    uint primCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
} indirectBuffer;

uniform int NumOfInstances;
uniform float density;
uniform float maxDist;
uniform float FrustumPlanes[24];

shared int sharedGrassBladeCount;

bool testSphere(float x, float y, float z, float r) {
    return FrustumPlanes[0] * x + FrustumPlanes[1] * y + FrustumPlanes[2] * z + FrustumPlanes[3] >= -r &&
    FrustumPlanes[4] * x + FrustumPlanes[5] * y + FrustumPlanes[6] * z + FrustumPlanes[7] >= -r &&
    FrustumPlanes[8] * x + FrustumPlanes[9] * y + FrustumPlanes[10] * z + FrustumPlanes[11] >= -r &&
    FrustumPlanes[12] * x + FrustumPlanes[13] * y + FrustumPlanes[14] * z + FrustumPlanes[15] >= -r &&
    FrustumPlanes[16] * x + FrustumPlanes[17] * y + FrustumPlanes[18] * z + FrustumPlanes[19] >= -r &&
    FrustumPlanes[20] * x + FrustumPlanes[21] * y + FrustumPlanes[22] * z + FrustumPlanes[23] >= -r;
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;
    int increment = 0;


    vec3 cameraPos = VeilCamera.CameraPosition;
    vec3 player = vec3(floor(cameraPos.x),0,floor(cameraPos.z));
    float cameraX = mod(cameraPos.x, 1);
    float cameraZ = mod(cameraPos.z, 1);
    cameraPos.xz = vec2(cameraX, cameraZ);

    uint instanceID = idx + (idy*NumOfInstances);

    float halfInstances = NumOfInstances / 2 - 0.5;
    float x = (mod(instanceID, NumOfInstances) - halfInstances);
    float z = (floor(instanceID / NumOfInstances) - halfInstances);

    vec3 offset = vec3(x/density, 31, z/density);


    #ifdef LEVEL324
    offset = vec3(x/density, (31+34), z/density);
    #endif

    vec3 WorldPos = offset - cameraPos;

    memoryBarrierShared();
    barrier();

    bool isInRoad = false;


    #ifdef LEVEL324
    isInRoad = (mod(player.x + offset.x, 1000) < 8) || ((player.z + offset.z > 0 && player.z + offset.z < 27) && (player.x + offset.x > 8 && player.x + offset.x < 56));
    #endif


    if (!isInRoad) {
        if (length(WorldPos.xz - cameraPos.xz) < 90){
            if (testSphere(WorldPos.x, WorldPos.y, WorldPos.z, 1.0)) {
                uint compactIndex = atomicAdd(indirectBuffer.primCount, 1);
                myBuffer.position[compactIndex] = offset;
            }
        }
    }

    barrier();
    memoryBarrierShared();
}