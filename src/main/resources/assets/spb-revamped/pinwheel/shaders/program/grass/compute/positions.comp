#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

#include veil:camera

layout (std430, binding = 0) writeonly buffer MyBuffer {
    vec3 position[];
} myBuffer;

layout (std430, binding = 1) buffer IndirectBuffer {
    uint count;
    uint primCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
} indirectBuffer;

uniform int NumOfInstances;
uniform float density;
uniform float FrustumPlanes[24];

shared int sharedGrassBladeCount;

bool testSphere(float x, float y, float z, float r) {
    return FrustumPlanes[0] * x + FrustumPlanes[1] * y + FrustumPlanes[2] * z + FrustumPlanes[3] >= -r &&
           FrustumPlanes[4] * x + FrustumPlanes[5] * y + FrustumPlanes[6] * z + FrustumPlanes[7] >= -r &&
           FrustumPlanes[8] * x + FrustumPlanes[9] * y + FrustumPlanes[10] * z + FrustumPlanes[11] >= -r &&
           FrustumPlanes[12] * x + FrustumPlanes[13] * y + FrustumPlanes[14] * z + FrustumPlanes[15] >= -r &&
           FrustumPlanes[16] * x + FrustumPlanes[17] * y + FrustumPlanes[18] * z + FrustumPlanes[19] >= -r &&
           FrustumPlanes[20] * x + FrustumPlanes[21] * y + FrustumPlanes[22] * z + FrustumPlanes[23] >= -r;
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;
    int increment = 0;

    uint instanceID = idx + (idy*NumOfInstances);

    vec3 cameraPos = VeilCamera.CameraPosition;

    float cameraX = mod(cameraPos.x, 1);
    float cameraZ = mod(cameraPos.z, 1);

    cameraPos.xz = vec2(cameraX, cameraZ);

    float halfInstances = NumOfInstances / 2 - 0.5;

    float x = (mod(instanceID, NumOfInstances) - halfInstances);
    float z = (floor(instanceID / NumOfInstances) - halfInstances);

    vec3 offset = vec3(x/density, -60, z/density);

    vec3 WorldPos = offset - cameraPos;

//    if(gl_LocalInvocationIndex == 0) sharedGrassBladeCount = 0;
    memoryBarrierShared();
    barrier();

    if(testSphere(WorldPos.x, WorldPos.y, WorldPos.z, 1.0)) {
//        myBuffer.position[instanceID] = offset;
//        atomicAdd(sharedGrassBladeCount, 1);
        uint compactIndex = atomicAdd(indirectBuffer.primCount, 1);
        myBuffer.position[compactIndex] = offset;
    }

    barrier();
    memoryBarrierShared();
//    if(gl_LocalInvocationIndex == 0) atomicAdd(indirectBuffer.primCount, sharedGrassBladeCount);





}